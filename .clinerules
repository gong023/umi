This is a server for the discord bot.

# Spec of bot

## Principals

- The users of this bot enjoy ウミガメのスープ qiuz interacting with this bot.
- The bot and users have conversation in Japanese.
- The bot server memorizes only one quiz at most.

# Tech stack

- golang
  - github.com/bwmarrin/discordgo
  - go.uber.org/mock
- OpenAI API
  - ChatGPT-4/Turbo
- github actions

# Tech spec overview

- The bot serves the websocket gateway.
- The bot is an agent for the OpenAI. So that the core thought about the quiz is in OpenAI side.
- The bot server takes configs such as API keys from the environment variables.
- The bot can uses local text files as memories.
  - The bot can create the multiple files and directories as necessary.
- This repository should run the tests and lints when the pull requests are created and pushed to main branch.

# Directories

This repository complies with the clean architecture. The levels are usecase -> infra -> domain. The lower level must not depend on the upper level. The upper level can depend on the lower level and the upper level can skip the level as necessary (ex: usecase can depend on domain).

- cmd
  - The main package for the entry. The configs are taken here.
- domain
  - The package for the fundamental structure definitions.
  - The shared logic such as logging can also exist.
- usecase
  - The package for the core logic.
  - There should be test files. In the tests, the dependencies for the infra package should be mocked.
- infra
  - The package for the external dependencies over tcp/ip such as OpenAI and discord APIs.
  - The mocks should be created by go.uber.org/mock are in infra/mock.
- .github
  - The files for github actions
- memo
  - The local files for the bot. It consists of memories and prompts.
  - memo/context
    - The directory for the quiz memories. Only the bot are supposed to create or update the files.
    - This directory should be .gitkeep and the other memory files should be .gitignore.
  - memo/prompt
    - The directory for the prompt memories. The users and bot can create or update the files.

# Coding styles

- No need comments unless the functions are too complicated(^50 lines) or need context on the background.
- goimport should be used instead of gofmt.
- When the task is completed, make sure the lint and test are passed.