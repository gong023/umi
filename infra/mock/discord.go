// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gong023/umi/domain (interfaces: DiscordClient)
//
// Generated by this command:
//
//	mockgen -destination=infra/mock/discord.go -package=mock github.com/gong023/umi/domain DiscordClient
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/gong023/umi/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscordClient is a mock of DiscordClient interface.
type MockDiscordClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordClientMockRecorder
}

// MockDiscordClientMockRecorder is the mock recorder for MockDiscordClient.
type MockDiscordClientMockRecorder struct {
	mock *MockDiscordClient
}

// NewMockDiscordClient creates a new mock instance.
func NewMockDiscordClient(ctrl *gomock.Controller) *MockDiscordClient {
	mock := &MockDiscordClient{ctrl: ctrl}
	mock.recorder = &MockDiscordClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordClient) EXPECT() *MockDiscordClientMockRecorder {
	return m.recorder
}

// RegisterCommands mocks base method.
func (m *MockDiscordClient) RegisterCommands(arg0 []*domain.ApplicationCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCommands", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCommands indicates an expected call of RegisterCommands.
func (mr *MockDiscordClientMockRecorder) RegisterCommands(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommands", reflect.TypeOf((*MockDiscordClient)(nil).RegisterCommands), arg0)
}

// RegisterHandler mocks base method.
func (m *MockDiscordClient) RegisterHandler(arg0 any) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandler", arg0)
	ret0, _ := ret[0].(func())
	return ret0
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockDiscordClientMockRecorder) RegisterHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockDiscordClient)(nil).RegisterHandler), arg0)
}

// Start mocks base method.
func (m *MockDiscordClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDiscordClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDiscordClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockDiscordClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDiscordClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDiscordClient)(nil).Stop))
}
