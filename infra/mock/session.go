// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gong023/umi/domain (interfaces: Session)
//
// Generated by this command:
//
//	mockgen -destination=infra/mock/session.go -package=mock github.com/gong023/umi/domain Session
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/gong023/umi/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(arg0 *domain.InteractionCreate, arg1 *domain.InteractionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionRespond", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), arg0, arg1)
}
