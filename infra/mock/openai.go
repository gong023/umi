// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gong023/umi/domain (interfaces: OpenAIClient)
//
// Generated by this command:
//
//	mockgen -destination=infra/mock/openai.go -package=mock github.com/gong023/umi/domain OpenAIClient
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/gong023/umi/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenAIClient is a mock of OpenAIClient interface.
type MockOpenAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIClientMockRecorder
}

// MockOpenAIClientMockRecorder is the mock recorder for MockOpenAIClient.
type MockOpenAIClientMockRecorder struct {
	mock *MockOpenAIClient
}

// NewMockOpenAIClient creates a new mock instance.
func NewMockOpenAIClient(ctrl *gomock.Controller) *MockOpenAIClient {
	mock := &MockOpenAIClient{ctrl: ctrl}
	mock.recorder = &MockOpenAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAIClient) EXPECT() *MockOpenAIClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockOpenAIClient) CreateChatCompletion(arg0 *domain.ChatCompletionRequest) (*domain.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", arg0)
	ret0, _ := ret[0].(*domain.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockOpenAIClientMockRecorder) CreateChatCompletion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockOpenAIClient)(nil).CreateChatCompletion), arg0)
}
